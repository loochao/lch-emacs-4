;;-*- coding:utf-8; mode:emacs-lisp; -*-

;;; ELISP.EL
;;
;; Copyright (c) 2006 2007 2008 2009 2010 2011 Charles LU
;;
;; Author: Chao LU <loochao@gmail.com>
;; URL: http://www.princeton.edu/~chaol

;; This file is not part of GNU Emacs.

;;; Commentary:

;; Settings for elisp packages.

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code
(message "=> lch-elisp: loading...")

(require 'lazy-set-key)

;;; Viper
;;(setq viper-mode t)
;;(require 'viper)
(define-key global-map (kbd "C-c v") 'toggle-viper-mode)

;;; Key-chord
(require 'key-chord)
(key-chord-mode 1)

;;; Rainbow-delimiter
;; (require 'rainbow-delimiters)
;; (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
;; (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)


;;; Doc-view
;; (require 'doc-view)
;; (lazy-set-key
;;  '(
;;    ("N" . doc-view-next-page)                      ;下一页
;;    ("P" . doc-view-previous-page)                  ;上一页
;;    ("." . doc-view-first-page)                     ;第一页
;;    ("," . doc-view-last-page)                      ;最后一页
;;    ("g" . doc-view-goto-page)                      ;跳到第几页
;;    ("e" . doc-view-scroll-down-or-previous-page)   ;向上滚动一屏
;;    ("SPC" . doc-view-scroll-up-or-next-page)       ;向下滚动一屏
;;    ("j" . doc-view-next-line-or-next-page)         ;下一行或下一屏
;;    ("k" . doc-view-previous-line-or-previous-page) ;上一行或上一屏
;;    ("t" . doc-view-show-tooltip)                   ;当前页提示
;;    ("q" . bury-buffer)                             ;隐藏buffer
;;    ("Q" . doc-view-kill-proc-and-buffer)           ;退出并结束进程
;;    ("C-s" . doc-view-search)                       ;搜索
;;    ("C-S-n" . doc-view-search-next-match)          ;下一个匹配
;;    ("C-S-p" . doc-view-search-previous-match)      ;上一个匹配
;;    ("+" . doc-view-enlarge)                        ;放大页面
;;    ("-" . doc-view-shrink)                         ;缩小页面
;;    ("C-c C-c" . doc-view-toggle-display)           ;在文本和图像间切换
;;    ("C-c C-t" . doc-view-open-text)                ;打开文本
;;    ("r" . revert-buffer)                           ;刷新
;;    ("s" . auto-scroll-mode)                        ;自动滚屏
;;    ("<" . auto-scroll-faster)                      ;加快滚屏速度
;;    (">" . auto-scroll-slower)                      ;减慢滚屏速度
;;    )
;;  doc-view-mode-map
;;  )

;;; Multi-scratch
;; (require 'multi-scratch)

;;; Edit-env
;; (require 'edit-env)

;;; Lazy-search
(require 'lazy-search)
(require 'lazy-search-extension)

;;; Unbound
;; command: describe-unbound-keys
;; Useful to find out unbound keys
;; but calls with-output-to-temp-buffer
;; which only exists in Emacs24
;;(require 'unbound)

;;; Eyedropper
;; eyedropper-foreground, eyedropper-background are useful
;; will prompt rgb in minibuffer
;; (require 'eyedropper)

;;; Show-wspace
;; (require 'show-wspace)

;;; Predictive
;; (require 'predictive)
;; (set-default 'predictive-auto-add-to-dict t) ;自动加入词典
;; (setq predictive-add-to-dict-ask nil)        ;加入词典不询问
;; (setq predictive-auto-learn t)               ;自动学习
;; (setq predictive-completion-speed 0.1)       ;查找补全的速度(秒)
;; (setq completion-auto-show-delay 0.5)        ;弹出补全tooltip的延迟(秒)
;; (dolist (hook (list
;;                'tex-mode-hook
;;                ;; 'org-mode-hook
;;                ))
;;   (add-hook hook '(lambda () (predictive-mode 1))))

;;; Revive
;; Store windows configuration which won't be taken care of by session
;; and desktop.
;; (require 'revive)

;;; Showtip
;; (require 'showtip)
;; (require 'show-help)

;;; Lazycat-toolkit
;; TODO: Move functions in this file to lch-util
(require 'basic-edit-toolkit)
(require 'lazycat-toolkit)

;;; Buffer-extension
(require 'buffer-extension)

;;; Thing-edit
(require 'thing-edit)                   ;基于thingatpt的编辑扩展
(require 'thing-edit-extension)         ;thing-edit 增强
(global-set-key (kbd "C-<f2>") 'one-key-menu-thing-edit)

;;; Linum
;; (dolist (hook (list
;;                'c-mode-hook
;;                'emacs-lisp-mode-hook
;;                'lisp-interaction-mode-hook
;;                'lisp-mode-hook
;;                'emms-playlist-mode-hook
;;                'java-mode-hook
;;                'asm-mode-hook
;;                'haskell-mode-hook
;;                'rcirc-mode-hook
;;                'emms-lyrics-mode-hook
;;                'erc-mode-hook
;;                'sh-mode-hook
;;                'makefile-gmake-mode-hook
;;                'python-mode-hook
;;                'js2-mode-hook
;;                'js-mode-hook
;;                'html-mode-hook
;;                'css-mode-hook
;;                'apt-utils-mode-hook
;;                'tuareg-mode-hook
;;                'go-mode-hook
;;                'coffee-mode-hook
;;                ))
;;   (add-hook hook (lambda () (linum-mode 1))))

;;; Template
(require 'template)
(template-initialize)
(setq template-default-directories (list (concat emacs-dir "/lib/template")))
(add-to-list 'template-find-file-commands 'ido-exit-minibuffer)

;;; Webjump
;;   (require 'webjump-plus)
;;   (setq webjump-sites
;;         (append '(
;;                   ("My Home Page" . "www.someisp.foo/users/joebobjr/")
;;                   ("Pop's Site"   . "www.joebob-and-son.foo/")
;;                   )
;;                 webjump-plus-sites
;;                 webjump-sample-sites))
;; (global-set-key (kbd "C-x j") 'webjump)

;; ;; Add Urban Dictionary to webjump
;; (eval-after-load "webjump"
;;   '(add-to-list 'webjump-sites
;;                 '("Urban Dictionary" .
;;                   [simple-query
;;                    "www.urbandictionary.com"
;;                    "http://www.urbandictionary.com/define.php?term="
;;                    ""])))

;;; Popwin
;; FIXME:Conflict with M-1 switch-to-shell
;; So have to comment out ("*shell*" :height)
;; (require 'popwin)
;; (setq display-buffer-function 'popwin:display-buffer)

;; (setq popwin:special-display-config
;;       '(("*Help*"  :height 0.3 :stick t)
;;         ("*Completions*" :noselect t)
;;         ("*compilation*" :noselect t)
;;         ("*Backtrace*" :height 0.3)
;;         ("*Messages*" :height 0.3)
;;         ("*Occur*" :noselect t)
;;         ("\\*Slime Description.*" :noselect t :regexp t :height 0.3)
;;         ("*magit-commit*" :noselect t :height 0.4 :width 80 :stick t)
;;         ("*magit-diff*" :noselect t :height 0.4 :width 80)
;;         ("*magit-edit-log*" :noselect t :height 0.4 :width 80)
;;         ("\\*Slime Inspector.*" :regexp t :height 0.3)
;;         ("*Ido Completions*" :noselect t :height 0.3)
;;         ("*eshell*" :height 0.3)
;;         ("\\*ansi-term\\*.*" :regexp t :height 0.3)
;;         ;; ("*shell*" :height 0.8)
;;         (".*overtone.log" :regexp t :height 0.3)
;;         ("*Kill Ring*" :height 0.3)
;;         ("*Compile-Log*" :height 0.3)))

;; (push '(" *undo-tree*" :width 0.3 :position right)
;;       popwin:special-display-config)

;; (defun lch-show-messages ()
;;   (interactive)
;;   (popwin:display-buffer "*Messages*"))
;; (define-key global-map (kbd "C-c m") 'lch-show-messages)

;;; Smooth-scrolling
;; (require 'smooth-scrolling)

;;; Lisp-auto-compile
;; Enable this will add two extra -- on the file status.
;; (require 'auto-compile)
;; (auto-compile-on-load-mode 1)
;; (auto-compile-on-save-mode 1)

;;; Elisp-slime-nav
;; (require 'elisp-slime-nav)
;; (add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t)))
;; (define-key global-map (kbd "M-.") 'elisp-slime-nav-find-elisp-thing-at-point)
;; (define-key global-map (kbd "M-,") 'pop-tag-mark)

;;; Multiple-cursor
;; (require 'multiple-cursors)
;; (global-set-key (kbd "<f10> <f10>") 'mc/edit-lines)
;; (global-set-key (kbd "<f10> <f9>") 'mc/mark-next-like-this)
;; (global-set-key (kbd "<f10> <f11>") 'mc/mark-previous-like-this)
;; (global-set-key (kbd "<f10> <f12>") 'mc/mark-all-like-this)



;;; Expand-region
;; (require 'expand-region)
;; (define-key global-map (kbd "C-\\") 'er/expand-region)

;;; Iy-go-go-char
;; (require 'iy-go-to-char)
;; (define-key global-map (kbd "C-x g") 'iy-go-to-char)
;; (define-key global-map (kbd "C-x G") 'iy-go-to-char-backward)
;; (define-key global-map (kbd "M-]") 'iy-go-to-char-continue)
;; (define-key global-map (kbd "M-[") 'iy-go-to-char-continue-backward)

;;; Quick-jump
;; (require 'quick-jump)
;; (quick-jump-default-keybinding)

;;; Window-number
;; (require 'window-number)
;; (autoload 'window-number-mode "window-number"
;;   "A global minor mode that enables selection of windows according to
;; numbers with the C-x C-j prefix.  Another mode,
;; `window-number-meta-mode' enables the use of the M- prefix."
;;   t)
;; (window-number-mode 1)

;; (autoload 'window-number-meta-mode "window-number"
;;   "A global minor mode that enables use of the M- prefix to select
;; windows, use `window-number-mode' to display the window numbers in
;; the mode-line."
;;   t)
;; (window-number-meta-mode 1)

;;; LaTeX-pretty-symbol
;; (require 'latex-pretty-symbols)

;;; Bookmark+
;; (require 'bookmark+)

;;; View-mode
;; (setq view-mode-hook
;;       (lambda ()
;;         (define-key view-mode-map "h" 'backward-char)
;;         (define-key view-mode-map "l" 'forward-char)
;;         (define-key view-mode-map "j" 'next-line)
;;         (define-key view-mode-map "k" 'previous-line)
;;         (define-key view-mode-map "q" 'bury-buffer)
;;         (define-key view-mode-map "u" 'view-scroll-page-backward)))

;; (defun lch-start-view ()
;;   (interactive)
;;   (when (and (not (member major-mode '(dired-mode erc-mode)))
;;              (member major-mode '(emacs-lisp-mode org-mode))
;;              (not (string= (buffer-name) ".bm-repository"))) (view-mode 1)))
;; ;; (add-hook 'find-file-hook 'lch-start-view)
;; (define-key global-map (kbd "C-c v") 'view-mode)

;;; Evil-mode
;; (require 'evil)
;; (defun lch-start-evil ()
;;   (interactive)
;;   (if (not (member major-mode '(dired-mode erc-mode))) (evil-mode 1)))
;; (add-hook 'find-file-hook 'lch-start-evil)
;; (define-key global-map (kbd "<f2> e") 'evil-mode)

;;; Viper
;; (setq viper-custom-file-name (convert-standard-filename "~/.emacs.d/.viper"))

;;; Ace-jump-mode
;; (autoload 'ace-jump-mode "ace-jump-mode" t)
;; you can select the key you prefer to
;; (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
;; (define-key global-map (kbd "C-c j") 'ace-jump-mode)

;; enable a more powerful jump back function from ace jump mode
;; (autoload 'ace-jump-mode-pop-mark "ace-jump-mode"
;;   "Ace jump back" t)
;; (eval-after-load "ace-jump-mode"
;;   '(ace-jump-mode-enable-mark-sync))
;; (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

;; If you use evil
;; (define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)

;;; Package
(when (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
  ;; (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/")))
(setq package-user-dir (concat emacs-dir "/elpa"))
(package-initialize)

;;; Window-layout-manager
;; FIXME idea is good, but seems to be buggy
;; (require 'e2wm)
;; (define-key global-map (kbd "M-+") 'e2wm:start-management)

;;; Kill-multiple-lines
;; (require 'kill-lines)
;; (define-key global-map (kbd "C-c C-k") 'kill-lines)

;;; Simple-slides
;; (require 'simple-slides)

;;; Key-chord
;; (require 'key-chord)
;; (key-chord-mode 1)

;; (key-chord-define-global ",."     "<>\C-b")
;; (key-chord-define-global "jk"     'dabbrev-expand)
;; (key-chord-define-global "cv"     'reindent-then-newline-and-indent)
;; (key-chord-define-global "4r"     "$")

;; ;; A ONE-key chord is a single key quickly pressed twice (within one third
;; ;; of a second or so)
;; (key-chord-define-global "''"     "`'\C-b")
;; (key-chord-define-global "uu"     'undo)
;; ;; (key-chord-define-global ",,"     'indent-for-comment)
;; (key-chord-define-global "qq"     "the ")
;; (key-chord-define-global "QQ"     "The ")

;;; Bash-completion
(require 'bash-completion)
(bash-completion-setup)

;; Or autoload it:
;; (autoload 'bash-completion-dynamic-complete
;;   "bash-completion"
;;   "BASH completion hook")
;; (add-hook 'shell-dynamic-complete-functions
;;           'bash-completion-dynamic-complete)
;; (add-hook 'shell-command-complete-functions
;;           'bash-completion-dynamic-complete)

;;; Undo-tree
;; Represent undo-history as an actual tree (visualize with C-x u)
(setq undo-tree-mode-lighter "")
(require 'undo-tree)
(global-undo-tree-mode 1)
(define-key global-map (kbd "C-x u") 'undo-tree-visualize)
(global-set-key (kbd "C-M-_") 'undo-tree-undo)
(global-set-key (kbd "C-_") 'undo-tree-undo)

;;; Erc
;; (define-key global-map (kbd "C-z erc") (lambda () (interactive)
;;                            (erc :server "irc.freenode.net" :port "6667"
;;                                 :nick "loochao")))
(setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#erc")))
(setq erc-interpret-mirc-color t)

;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
;; Kill buffers for private queries after quitting the server
(setq erc-kill-queries-on-quit t)
;; Kill buffers for server messages after quitting the server
(setq erc-kill-server-buffer-on-quit t)

;;; Weibo
;; (require 'weibo)

;;; Twittering-mode
;; (require 'twittering-mode)

;; ;; Need support of gnupg, to prevent inputting passwd every time.
;; (setq twittering-use-master-password t)

;; ;; Some site like sina doesn't like SSL.
;; (setq twittering-allow-insecure-server-cert t)
;; (setq twittering-oauth-use-ssl nil)
;; (setq twittering-use-ssl nil)

;; ;; Display unread tweets and icon.
;; (twittering-enable-unread-status-notifier)
;; (setq-default twittering-icon-mode t)

;; ;; Timeline open by default
;; (setq twittering-initial-timeline-spec-string
;;       `(":home@sina"
;;        ;; ":home@douban"
;;        ;; ":home@twitter"
;;         ))

;; (set-face-background twittering-zebra-1-face "gray24")
;; (set-face-background twittering-zebra-2-face "gray22")

;; ;; FIXME

;; (define-key global-map (kbd "M-8 p")
;;   'twittering-update-status-interactive)
;; (define-key global-map (kbd "M-8 M-8")
;;   'lch-twittering-update-status-interactive)
;; (define-key global-map (kbd "M-9")
;;   'lch-twittering-update-status-interactive)
;; (define-key global-map (kbd "M-8 r")
;;   'twittering-retweet)

;; (defun lch-twittering-update-status-interactive ()
;;   (interactive)
;;   (let ((spec (twittering-current-timeline-spec)))
;;     (save-excursion
;;       (funcall twittering-update-status-function
;;                nil nil nil spec))))

;;; Tabbar-ruler
;; (setq EmacsPortable-global-tabbar nil) ; If you want tabbar
;; (setq EmacsPortable-global-ruler nil)  ; if you want a global ruler
;; (setq EmacsPortable-popup-menu t)      ; If you want a popup menu.
;; (setq EmacsPortable-popup-toolbar nil) ; If you want a popup toolbar

;; (require 'tabbar-ruler)

;;; BM
;; (setq bm-restore-repository-on-load t)
;; (setq bm-repository-file (concat emacs-var-dir "/.bm-repository"))
;; (setq bm-repository-size nil)      ;; nil == unlimited
;; (require 'bm)

;; (set-face-attribute 'bm-persistent-face nil :background "SlateBlue")
;; ;(setq bm-highlight-style 'bm-highlight-line-and-fringe)

;; (define-key global-map (kbd "<f5> /") 'bm-toggle)
;; (define-key global-map (kbd "<f5> .") 'bm-next)
;; (define-key global-map (kbd "<f5> ,") 'bm-previous)
;; (define-key global-map (kbd "M-<f5>") 'bm-previous)
;; (define-key global-map (kbd "C-<f5>") 'bm-next)
;; ;; make bookmarks persistent as default
;; (setq-default bm-buffer-persistence t)

;; ;; Loading the repository from file when on start up.
;; (add-hook' after-init-hook 'bm-repository-load)

;; ;; Restoring bookmarks when on file find.
;; (add-hook 'find-file-hooks 'bm-buffer-restore)

;; ;; Saving bookmark data on killing a buffer
;; (add-hook 'kill-buffer-hook 'bm-buffer-save)

;; ;; Saving the repository to file when on exit.
;; ;; kill-buffer-hook is not called when emacs is killed, so we
;; ;; must save all bookmarks first.
;; (add-hook 'kill-emacs-hook '(lambda nil
;;                               (bm-buffer-save-all)
;;                               (bm-repository-save)))

;; (add-hook 'after-save-hook 'bm-buffer-save)
;; (add-hook 'after-revert-hook 'bm-buffer-restore)
;; (setq bm-wrap-search t)
;; (setq bm-wrap-immediately nil)

;;; Recentf
(defun lch-recentf-ido-find-file ()
  "Find a recent file using ido."
  (interactive)
  (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
    (when file
      (find-file file))))

;; Key bindings
(define-key global-map (kbd "C-c r") 'lch-recentf-ido-find-file)
(define-key global-map (kbd "C-c f") 'lch-recentf-ido-find-file)

;;; Pager
;; Better scrolling in Emacs (doing a `Pg Up' followed by a `Pg Dn' will
;; place the point at the same place)
(require 'pager)
(define-key global-map (kbd "C-v") 'pager-page-down)
(define-key global-map (kbd "M-v") 'pager-page-up)
;; (define-key global-map '[M-up] 'pager-row-up)
;; (define-key global-map '[M-kp-8] 'pager-row-up)
;; (define-key global-map '[M-down] 'pager-row-down)
;; (define-key global-map '[M-kp-2] 'pager-row-down)

;;; Cedet
;; -> lch-coding

;;; Find-dired
(require 'find-dired)
(setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))

;;; iDo
(ido-mode t)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-max-prospects 10
      ido-default-file-method 'selected-window)

(add-to-list 'ido-ignore-directories "target")
(add-to-list 'ido-ignore-directories "node_modules")

;; Use ido everywhere -- seems to be slow.
;; (require 'ido-ubiquitous)
;; (ido-ubiquitous)

(setq ido-save-directory-list-file (concat emacs-var-dir "/emacs-ido-last"))
(define-key global-map (kbd "C-x b") 'ido-switch-buffer)

;; Ignore .DS_Store files with ido mode
(add-to-list 'ido-ignore-files "\\.DS_Store")

;; (setq ido-show-dot-for-dired t)
;; (setq ido-enable-tramp-completion nil)
;;; idomenu
;; (require 'idomenu)
;; (icomplete-mode 1)

;; (defvar live-symbol-names)
;; (defvar live-name-and-pos)

;; (defun live-ido-goto-symbol (&optional symbol-list)
;;   "Refresh imenu and jump to a place in the buffer using Ido."
;;   (interactive)
;;   (unless (featurep 'imenu)
;;     (require 'imenu nil t))
;;   (cond
;;    ((not symbol-list)
;;     (let ((ido-mode ido-mode)
;;           (ido-enable-flex-matching
;;            (if (boundp 'ido-enable-flex-matching)
;;                ido-enable-flex-matching t))
;;           live-name-and-pos live-symbol-names position selected-symbol)
;;       (unless ido-mode
;;         (ido-mode 1)
;;         (setq ido-enable-flex-matching t))
;;       (while (progn
;;                (imenu--cleanup)
;;                (setq imenu--index-alist nil)
;;                (live-ido-goto-symbol (imenu--make-index-alist))
;;                (setq selected-symbol
;;                      (ido-completing-read "Symbol? " live-symbol-names))
;;                (string= (car imenu--rescan-item) selected-symbol)))
;;       (unless (and (boundp 'mark-active) mark-active)
;;         (push-mark nil t nil))
;;       (setq position (cdr (assoc selected-symbol live-name-and-pos)))
;;       (cond
;;        ((overlayp position)
;;         (goto-char (overlay-start position)))
;;        (t
;;         (goto-char position)))))
;;    ((listp symbol-list)
;;     (dolist (symbol symbol-list)
;;       (let (name position)
;;         (cond
;;          ((and (listp symbol) (imenu--subalist-p symbol))
;;           (live-ido-goto-symbol symbol))
;;          ((listp symbol)
;;           (setq name (car symbol))
;;           (setq position (cdr symbol)))
;;          ((stringp symbol)
;;           (setq name symbol)
;;           (setq position
;;                 (get-text-property 1 'org-imenu-marker symbol))))
;;         (unless (or (null position) (null name)
;;                     (string= (car imenu--rescan-item) name))
;;           (add-to-list 'live-symbol-names name)
;;           (add-to-list 'live-name-and-pos (cons name position))))))))

;; ;; Jump to a definition in the current file.
;; (global-set-key (kbd "C-x C-i") 'idomenu)


;;; iBuffer-git
;; (require 'ibuffer-git)

;; ;;nicely format the ibuffer and include git-status
;; (setq ibuffer-formats '((mark modified read-only git-status-mini " "
;;                               (name 18 18 :left :elide)
;;                               " "
;;                               (size 9 -1 :right)
;;                               " "
;;                               (git-status 8 8 :left :elide)
;;                               " "
;;                               (mode 16 16 :left :elide)
;;                               " " filename-and-process)))

;;; Browse-kill-ring
;; (info "(emacs)Kill Ring")
(require 'browse-kill-ring)
(setq browse-kill-ring-separator
      "\n--item------------------------------")
;; temporarily highlight the inserted `kill-ring' entry
(setq browse-kill-ring-highlight-inserted-item t)
(setq browse-kill-ring-no-duplicates t)
(setq browse-kill-ring-display-duplicates nil)

;; (defface separator-face '((t (:foreground "Orange" :weight bold))) nil)
;; (setq browse-kill-ring-separator-face 'separator-face)
(define-key global-map (kbd "C-c k") 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

;;; Hide-region
;; Hide-region
;; (require 'hide-region)
;; (define-key global-map (kbd "C-c r") 'hide-region-hide)
;; (define-key global-map (kbd "C-c R") 'hide-region-unhide)

;; Hide-line
;; (require 'hide-lines)
;; (define-key global-map (kbd "C-c l") 'hide-lines)
;; (define-key global-map (kbd "C-c L") 'show-all-invisible)

;;; Htmlize-buffer
(require 'htmlize)

;;; YASnippet
;; Loaded in org.el
;; (add-to-list 'load-path
;;              (concat emacs-dir "/site-lisp/yasnippet-0.6.1c"))
(require 'yasnippet) ;; not yasnippet-bundle
;; (setq yas/root-directory (concat emacs-lib-dir "/snippets"))
;; (yas/load-directory yas/root-directory)
;; (yas/initialize)
;; (setq yas/trigger-key nil)
;; (yas/global-mode t)

(setq lch-yasnippet-dir (concat emacs-lib-dir "/snippets"))
(setq yas-snippet-dirs `(,lch-yasnippet-dir))
(yas-global-mode t)

(defun lch-reload-snippets ()
  (interactive)
  (yas-load-directory lch-yasnippet-dir))

;;; Company
;; (add-to-list 'load-path (concat emacs-dir "/site-lisp/company"))
;; (autoload 'company-mode "company" nil t)

;; (setq company-idle-delay 0.2)
;; (setq company-minimum-prefix-length 1)

;; Enable company mode when entering these modes.
;; (dolist (hook (list
;;                'emacs-lisp-mode-hook
;;                'lisp-mode-hook
;;                'lisp-interaction-mode-hook
;;             'sh-mode-hook
;;             'org-mode-hook))
;;   (add-hook hook 'company-mode))

;; (require 'company)
;; (global-company-mode 1)
;; ;; only complete on freshly typed text
;; (setq company-begin-commands '(self-insert-command))


;;; Auto-Complete
;; (require 'auto-complete)
;; (require 'auto-complete-config)
;; (ac-config-default)
;; (ac-flyspell-workaround)

;; (add-to-list 'ac-dictionary-directories emacs-site-lisp)
;; (define-key ac-completing-map (kbd "M-n") 'ac-next)
;; (define-key ac-completing-map (kbd "M-p") 'ac-previous)
;; (setq popup-use-optimized-column-computation nil)

;; (global-auto-complete-mode t)           ;; enable global-mode
;; (setq ac-auto-start t)                  ;; automatically start
;; (setq ac-dwim t)                        ;; Do what i mean
;; (setq ac-override-local-map nil)        ;; don't override local map
;; (setq ac-auto-show-menu t)
;; (setq ac-menu-height 20)                ;; 20 lines
;; (setq ac-use-menu-map t)
;; (setq ac-quick-help-delay 1)
;; (setq ac-quick-help-height 60)
;; (setq ac-disable-inline t)
;; (setq ac-show-menu-immediately-on-auto-complete t)
;; (setq ac-auto-start 2)
;; (setq ac-candidate-menu-min 0)

;; (set-default 'ac-sources
;;              '(ac-source-dictionary
;;                ac-source-words-in-buffer
;;                ac-source-words-in-same-mode-buffers
;;                ac-source-semantic
;;                ac-source-yasnippet))

;; (dolist (mode '(magit-log-edit-mode log-edit-mode org-mode text-mode haml-mode
;;                                     sass-mode yaml-mode csv-mode espresso-mode haskell-mode
;;                                     html-mode nxml-mode sh-mode smarty-mode clojure-mode
;;                                     lisp-mode textile-mode markdown-mode tuareg-mode))
;; (add-to-list 'ac-modes mode))

;; ;; Exclude very large buffers from dabbrev
;; (defun sanityinc/dabbrev-friend-buffer (other-buffer)
;;   (< (buffer-size other-buffer) (* 1 1024 1024)))

;; (setq dabbrev-friend-buffer-function 'sanityinc/dabbrev-friend-buffer)

;; ;; User defined dictionary
;; (setq ac-user-dictionary '("loochao" "loochao@gmail.com"))
;; (setq ac-user-dictionary-files (concat emacs-var-dir "ac-user-dict"))

;;; Vimpulse
;; (require 'vimpulse)

;;; Cygwin
;; (require 'setup-cygwin)

;;; Sunrise Commander
;; (require 'sunrise-commander)
;; (add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))
;; (define-key global-map (kbd "C-M-e") 'sunrise)
;; (require 'sunrise-x-buttons)
;; (require 'sunrise-x-loop)
;; (require 'sunrise-x-mirror)
;; (require 'sunrise-x-modeline)
;; (require 'sunrise-x-tabs)
;; (require 'sunrise-x-tree)


;;; Highlight-tail
;; (require 'highlight-tail)

;;; Whitespace-mode
;; Make whitespace-mode with very basic background coloring for whitespaces
;; (defvar whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))

;; Make whitespace-mode and whitespace-newline-mode use "¶" for end of line char and ▷ for tab.
;; (setq
;;  whitespace-display-mappings
;;  '(
;;    (space-mark 32 [183] [46]) ; normal space, MIDDLE DOT, FULL STOP.
;;    (space-mark 160 [164] [95])
;;    (space-mark 2208 [2212] [95])
;;    (space-mark 2336 [2340] [95])
;;    (space-mark 3616 [3620] [95])
;;    (space-mark 3872 [3876] [95])
;;    (newline-mark 10 [182 10]) ; newlne
;;    (tab-mark 9 [9655 9] [92 9]) ; tab
;;    ))


;;; Highlight Symbol
;; Highlight occurrence of current word, and move cursor to next/prev occurrence
;; see http://xahlee.org/emacs/modernization_isearch.html
(require 'highlight-symbol)
(define-key global-map (kbd "<f9> <f9>") 'highlight-symbol-at-point) ;; This is a toggle
(define-key global-map (kbd "<f9> <f8>") 'highlight-symbol-prev)
(define-key global-map (kbd "<f9> <f10>") 'highlight-symbol-next)


;;; Bat Mode
;; For editing Windows's cmd.exe's script; batch, ".bat" file mode.
;; (autoload 'dos-mode "dos" "A mode for editing Windows cmd.exe batch scripts." t)
;; (add-to-list 'auto-mode-alist '("\\.bat\\'" . dos-mode))
;; (add-to-list 'auto-mode-alist '("\\.cmd\\'" . dos-mode))
;; (when (string-equal system-type "windows-nt")
;;   (progn
;;     (setq auto-mode-alist
;;           (append
;;            (list (cons "\\.[bB][aA][tT]$" 'bat-mode))
;;            ;; For DOS init files
;;            (list (cons "CONFIG\\."   'bat-mode))
;;            (list (cons "AUTOEXEC\\." 'bat-mode))
;;            auto-mode-alist))
;;     (autoload 'bat-mode "bat-mode" "DOS and WIndows BAT files" t)))

;;; AutoHotKey Mode
;; a keyboard macro for Windows
;; (autoload 'xahk-mode "xahk-mode" "AutoHotKey mode" t)
;; (add-to-list 'auto-mode-alist '("\\.ahk\\'" . xahk-mode))

;;; Hunspell
;; (when (string-equal system-type "windows-nt")
;;   (when (or (file-exists-p "../bin/hunspell")
;;             (file-exists-p "C:\\Program Files (x86)\\ErgoEmacs\\hunspell")
;;             )
;;     (progn
;;       (add-to-list 'load-path
;;                    (concat (file-name-directory (or load-file-name buffer-file-name)) "../site-lisp/rw-hunspell/") )
;;       (require 'rw-hunspell)
;;       (rw-hunspell-setup)
;;       ) ) )


;;; Desktop
;; Make emacs open all files in last emacs session.
;; Desktop is already part of Emacs.
;; This functionality is provided by desktop-save-mode ("feature"
;; name: "desktop"). The mode is not on by default in emacs 23, and
;; has a lot options.

;; By default, it read .emacs.desktop.lock file from the
;; dir where Emacs starts from, so when evoke Emacs from
;; FVWM by C-W-2, it reads the file from ~/.

;; Goal: have emacs always auto open the set of opend files in last
;; session, even if emacs crashed in last session or the OS crashed in
;; last session. Also, don't bother users by asking questions like "do
;; you want to save desktop?" or "do you want to override last session
;; file?", because these are annoying and terms like "session" or
;; "desktop" are confusing to most users because it can have many
;; meanings.

;; Some tech detail: set the desktop session file at
;; user-emacs-directory (default is "~/.emacs.d/.emacs.desktop").  This file
;; is our desktop file. It will be auto created and or over-written.
;; if a emacs expert has other desktop session files elsewhere, he can
;; still use or manage those.

;; Save the desktop file automatically if it already exists.
;; Use M-x desktop-save once to save the desktop, eachtime you exit Emacs
;; Or just set (desktop-save-mode 1), so Emacs will save desktop automatically.

(require 'desktop)

;; (setq desktop-path '("~/.emacs.d/"))
;; (setq desktop-dirname "~/.emacs.d/")
;; (setq desktop-base-file-name ".emacs-desktop")

(defun desktop-settings-setup()
  (desktop-save-mode 1)
  (setq desktop-save t)
  (setq desktop-load-locked-desktop t)
  (setq desktop-dirname emacs-var-dir)
  (setq desktop-path (list emacs-var-dir))
  (if (file-exists-p (concat desktop-dirname desktop-base-file-name))
      (desktop-read desktop-dirname)))

(add-hook 'after-init-hook 'desktop-settings-setup)

;; (defun desktop-settings-setup ()
;;   "Some settings setup for desktop-save-mode."
;;   (interactive)

;;   ;; At this point the desktop.el hook in after-init-hook was
;;   ;; executed, so (desktop-read) is avoided.
;;   (when (not (eq (emacs-pid) (desktop-owner))) ; Check that emacs did not load a desktop yet
;;     ;; Here we activate the desktop mode
;;     (desktop-save-mode 1)

;;     ;; The default desktop is saved always
;;     (setq desktop-save t)

;;     ;; The default desktop is loaded anyway if it is locked
;;     (setq desktop-load-locked-desktop t)

;;     ;; Set the location to save/load default desktop
;;     (setq desktop-dirname emacs-var-dir)
;;     (setq desktop-path (list emacs-var-dir))

;;     ;; Make sure that even if emacs or OS crashed, emacs
;;     ;; still have last opened files.
;;     (add-hook 'find-file-hook
;;               (lambda ()
;;                 (run-with-timer 5 nil
;;                                 (lambda ()
;;                                   ;; Reset desktop modification time so the user is not bothered
;;                                   (setq desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name))))
;;                                   (desktop-save user-emacs-directory)))))

;;     ;; Read default desktop
;;     (if (file-exists-p (concat desktop-dirname desktop-base-file-name))
;;     (desktop-read desktop-dirname))
;;     ;; Add a hook when emacs is closed to we reset the desktop
;;     ;; modification time (in this way the user does not get a warning
;;     ;; message about desktop modifications)
;;     (add-hook 'kill-emacs-hook
;;               (lambda ()
;;                 ;; Reset desktop modification time so the user is not bothered
;;                 (setq desktop-file-modtime (nth 5 (file-attributes (desktop-full-file-name))))))
;;     )
;;   )





;; Tabbar-ruler
;; (require 'tabbar-ruler)

;;; Fill-column-indicator
;; (require 'fill-column-indicator)
;; (require 'fci-osx-23-fix)
;; (setq fci-rule-width 1)
;; (setq fci-rule-color "#111122")

;;; Textmate
;; Works only for mac.
;; (when lch-mac-p
;;   (require 'textmate)
;;   (textmate-mode))

;;; Viper
;; (setq viper-custom-file-name (convert-standard-filename "~/.emacs.d/.viper"))

;;; Windmove
;; use shift + arrow keys to switch between visible buffers
;; (require 'windmove)
;; (windmove-default-keybindings 'super)

;;; Icicles
;; (require 'icicles)
;; (icy-mode 1)

;;; Gse-number-rect
;; Insert self-incremental number prefix to a rect region.
;; (require 'gse-number-rect)
;; (define-key global-map "\C-xru" 'gse-number-rectangle)

;;; Highlight non-breaking spaces
;; FIXME How does it work?
;; (require 'disp-table)
;; (aset standard-display-table
;;       (make-char 'latin-iso8859-1 (- ?\240 128))
;;       (vector (+ ?\267 (* 524288 (face-id 'nobreak-space)))))

;;; PP ^L
;; loaded in lch-ui.el

;;; Leisure Read
;; FIXME: It wrote ~/lch-bmk, which is bad. Besides, it mess up with
;; the bookmark files, which leads org not working alright.
;; (require 'leisureread)
;; (define-key global-map (kbd "s-]") 'leisureread-insert-next-line)
;; (define-key global-map (kbd "s-[") 'leisureread-insert-previous-line)
;; (global-set-key (kbd "s-\\") 'leisureread-clear-line)

;;; Flyspell
;; By default, it's iSpell, but if aspell is installed:
(when (featurep 'aspell) (setq ispell-program-name "aspell"))
(set-default 'ispell-skip-html t)
(setq ispell-local-dictionary "english")
(setq ispell-extra-args '("--sug-mode=ultra"))
;; (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)

(defun lch-turn-on-flyspell ()
  "Force flyspell-mode on using a positive argument.  For use in hooks."
  (interactive)
  (flyspell-mode +1))

;; (add-hook 'message-mode-hook 'lch-turn-on-flyspell)
;; (add-hook 'text-mode-hook 'lch-turn-on-flyspell)
;; (add-hook 'nxml-mode-hook 'lch-turn-on-flyspell)
;; (add-hook 'texinfo-mode-hook 'lch-turn-on-flyspell)
;; (add-hook 'TeX-mode-hook 'lch-turn-on-flyspell)
;; (add-hook 'c-mode-common-hook 'flyspell-prog-mode)
;; (add-hook 'lisp-mode-hook 'flyspell-prog-mode)
;; (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)

;; Omit tex keywords
(add-hook 'tex-mode-hook (function (lambda () (setq ispell-parser 'tex))))

;; Personal dict and save personal dict w/o enquiry.
;; (setq ispell-personal-dictionary (concat emacs-var-dir "/personal-dictionary"))
;; (setq ispell-silently-savep t)

;;; Calfw
;; (require 'calfw)
;; (require 'calfw-org)

;;; Magit
(require 'magit)
(define-key global-map (kbd "<f1> g") 'magit-status)



;; OR auto-load:
(autoload 'goto-last-change "goto-last-change"
  "Set point to the position of the last change." t)

;;; Pager
;; Better scrolling in Emacs (doing a `Pg Up' followed by a `Pg Dn' will
;; place the point at the same place)
(require 'pager)
(define-key global-map (kbd "C-v") 'pager-page-down)
(define-key global-map (kbd "M-v") 'pager-page-up)
(define-key global-map '[M-up] 'pager-row-up)
(define-key global-map '[M-kp-8] 'pager-row-up)
(define-key global-map '[M-down] 'pager-row-down)
(define-key global-map '[M-kp-2] 'pager-row-down)

;;; Rainbow mode
(require 'rainbow-mode)

;;; Autopair
;; Auto insert the other part of Paren.
;; The same as skeleton-insert-pair.
;; (require 'autopair)
;; (autopair-global-mode) ;; to enable in all buffers

;;; Lisp conf
;; (require 'highlight-beyond-fill-column)
;; (setq highlight-beyond-fill-column-in-modes
;;       '("emacs-lisp-mode"))

;;; Less
(require 'less)
(eval-after-load 'less
  '(progn
     (setq auto-less-exclude-regexp
           (concat auto-less-exclude-regexp
                   "\\|"
                   (regexp-opt '("todo.org"
                                 "outgoing"
                                 "*gud"
                                 "*anything"
                                 "*Scratch*"
                                 ".breadcrumb"
                                 ))))
     (setq auto-less-exclude-modes
           (append auto-less-exclude-modes
                   '(proced-mode erc-mode)))
     ))
(global-less-minor-mode 1)
(global-set-key (kbd "C-c v") 'less-minor-mode)



;;; iBuffer
;; ibuffer shows a buffer list that allows to perform almost any
;; imaginable operation on the opened buffers.
(when (require 'ibuffer)
  ;; completely replaces `list-buffer'
  (defalias 'ibuffer-list-buffers 'list-buffer)

  (setq ibuffer-shrink-to-minimum-size t)
  (setq ibuffer-always-show-last-buffer nil)
  (setq ibuffer-sorting-mode 'recency)
  (setq ibuffer-use-header-line t)

  (define-key global-map (kbd "C-x C-b") 'ibuffer)
  )
(setq ibuffer-saved-filter-groups
  (quote (("default"      
            ("Org" ;; all org-related buffers
              (mode . org-mode))  
            ("Mail"
              (or  ;; mail-related buffers
               (mode . mew-message-mode)
               (mode . mew-summary-mode)
               (mode . mew-draft-mode)
               ))
            ("Programming" ;; prog stuff
              (or
                (mode . c-mode)
                (mode . perl-mode)
                (mode . python-mode)
                (mode . emacs-lisp-mode)
                (mode . clojure-mode)
                )) 
            ("ERC"   (mode . erc-mode))
            ("Jabber"
             (or
              (mode . jabber-chat-mode)
              (mode . jabber-roster-mode)))))))

(add-hook 'ibuffer-mode-hook
  (lambda ()
    (ibuffer-switch-to-saved-filter-groups "default")))


;;; Matlab
(autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
(autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)

;;; Auto-complete
(require 'auto-complete-config)

;;; Session
;; Save a list of open files in ~/Dropbox/.emacs.d/var/session.
(require 'session)
(add-hook 'after-init-hook 'session-initialize)

;;; provide
(provide 'lch-elisp)
(message "~~ lch-elisp: done.")


;;; Local Vars.
;; Local Variables:
;; mode: emacs-lisp
;; mode: outline-minor
;; outline-regexp: ";;;;* "
;; End:
