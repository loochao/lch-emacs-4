;;-*- coding: utf-8 -*-

;;; OUTLINE.EL
;;
;; Copyright (c) 2006 2007 2008 2009 2010 2011 Chao LU
;;
;; Author: Chao LU <loochao@gmail.com>
;; URL: http://www.princeton.edu/~chaol

;; This file is not part of GNU Emacs.

;;; Commentary:

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code
;;; Utils
(add-hook 'outline-minor-mode-hook
          (lambda ()
            (local-set-key (kbd "C-o") outline-mode-prefix-map)
            (hide-body)))
(global-unset-key (kbd "C-o"))

(defun body-p ()
  (save-excursion
    (outline-back-to-heading)
    (outline-end-of-heading)
    (and (not (eobp))
         (progn (forward-char 1)
                (not (outline-on-heading-p))))))

(defun body-visible-p ()
  (save-excursion
    (outline-back-to-heading)
    (outline-end-of-heading)
    (outline-visible)))

(defun subheadings-p ()
  (save-excursion
    (outline-back-to-heading)
    (let ((level (funcall outline-level)))
      (outline-next-heading)
      (and (not (eobp))
           (< level (funcall outline-level))))))

(defun subheadings-visible-p ()
  (interactive)
  (save-excursion
    (outline-next-heading)
    (outline-visible)))

(defun outline-do-close ()
  (interactive)
  (if (outline-on-heading-p)
      (cond ((and (body-p) (body-visible-p))
             (hide-entry))
            ((and (subheadings-p)
                  (subheadings-visible-p))
             (hide-subtree))
            (t (outline-previous-visible-heading 1)))
    (outline-back-to-heading t)))

(defun outline-do-open ()
  (interactive)
  (if (outline-on-heading-p)
      (cond ((and (subheadings-p)
                  (not (subheadings-visible-p)))
             (show-children))
            ((and (body-p)
                  (not (body-visible-p)))
             (show-entry))
            (t (show-entry)))
    (outline-next-visible-heading 1)))

(define-key outline-mode-map (kbd "<left>") 'outline-do-close)
(define-key outline-mode-map (kbd "<right>") 'outline-do-open)
(define-key outline-minor-mode-map (kbd "<left>") 'outline-do-close)
(define-key outline-minor-mode-map (kbd "<right>") 'outline-do-open)

(define-key outline-minor-mode-map (kbd "M-<left>") 'hide-body)
(define-key outline-minor-mode-map (kbd "M-<right>") 'show-all)
(define-key outline-minor-mode-map (kbd "M-<up>") 'outline-previous-heading)
(define-key outline-minor-mode-map (kbd "M-<down>") 'outline-next-heading)

(define-key outline-mode-map (kbd "M-<left>") 'hide-body)
(define-key outline-mode-map (kbd "M-<right>") 'show-all)
(define-key outline-mode-map (kbd "M-<up>") 'outline-previous-heading)
(define-key outline-mode-map (kbd "M-<down>") 'outline-next-heading)

(define-key outline-minor-mode-map (kbd "C-M-<left>") 'hide-sublevels)
(define-key outline-minor-mode-map (kbd "C-M-<right>") 'show-children)
(define-key outline-minor-mode-map (kbd "C-M-<up>") 'outline-previous-visible-heading)
(define-key outline-minor-mode-map (kbd "C-M-<down>") 'outline-next-visible-heading)

(define-key outline-mode-map (kbd "C-M-<left>") 'hide-sublevels)
(define-key outline-mode-map (kbd "C-M-<right>") 'show-children)
(define-key outline-mode-map (kbd "C-M-<up>") 'outline-previous-visible-heading)
(define-key outline-mode-map (kbd "C-M-<down>") 'outline-next-visible-heading)

(when (require 'outline-magic)
  (add-hook 'outline-minor-mode-hook
            (lambda ()
              (define-key outline-minor-mode-map
                (kbd "<M-tab>") 'outline-cycle))))

(defun org-cycle-global ()
  (interactive)
  (org-cycle t))

(defun org-cycle-local ()
  (interactive)
  (save-excursion
    (move-beginning-of-line nil)
    (org-cycle)))

(global-set-key (kbd "C-M-]") 'org-cycle-global) ; ok on Elisp, not on LaTeX
(global-set-key (kbd "M-]") 'org-cycle-local) ; ok on Elisp, not on LaTeX

(message "~~ lch-outline: done.")
(provide 'lch-outline)

;;; Local Vars.
;; Local Variables:
;; mode: emacs-lisp
;; mode: outline-minor
;; outline-regexp: ";;;;* "
;; End:
